#include "FreeRTOS.h"
#include "task.h"
#include "queue.h"
#include <stdint.h>

// RCC, GPIO, ADC, USART
#define RCC_BASE        0x40021000UL
#define RCC_IOPENR      (*(volatile uint32_t*)(RCC_BASE + 0x34))
#define RCC_APB2ENR     (*(volatile uint32_t*)(RCC_BASE + 0x18))

#define GPIOA_BASE      0x50000000UL
#define GPIOA_MODER     (*(volatile uint32_t*)(GPIOA_BASE + 0x00))
#define GPIOA_AFRL      (*(volatile uint32_t*)(GPIOA_BASE + 0x20))

#define GPIOC_BASE      0x50000800UL
#define GPIOC_MODER     (*(volatile uint32_t*)(GPIOC_BASE + 0x00))
#define GPIOC_ODR       (*(volatile uint32_t*)(GPIOC_BASE + 0x14))

#define ADC_BASE        0x40012400UL
#define ADC_ISR         (*(volatile uint32_t*)(ADC_BASE + 0x00))
#define ADC_CR          (*(volatile uint32_t*)(ADC_BASE + 0x08))
#define ADC_CHSELR      (*(volatile uint32_t*)(ADC_BASE + 0x28))
#define ADC_DR          (*(volatile uint32_t*)(ADC_BASE + 0x40))

#define USART2_BASE     0x40004400UL
#define USART2_CR1      (*(volatile uint32_t*)(USART2_BASE + 0x00))
#define USART2_BRR      (*(volatile uint32_t*)(USART2_BASE + 0x0C))
#define USART2_ISR      (*(volatile uint32_t*)(USART2_BASE + 0x1C))
#define USART2_TDR      (*(volatile uint32_t*)(USART2_BASE + 0x28))

QueueHandle_t tempQueue;

// Delay for hardware stabilization
void delay(volatile uint32_t d) {
    while (d--) {
        for (volatile uint32_t i = 0; i < 1000; i++);
    }
}

// USART2 Init
void usart2_init(void) {
    RCC_IOPENR |= (1 << 0); // GPIOA clock
    GPIOA_MODER &= ~(0x3 << (2*2)); // PA2 AF
    GPIOA_MODER |=  (0x2 << (2*2));
    GPIOA_AFRL  |=  (0x1 << (4*2)); // AF1 for USART2 TX

    RCC_APB2ENR |= (1 << 17); // USART2 clock

    USART2_BRR = 64000000 / 115200; // 115200 baud
    USART2_CR1 = (1 << 0) | (1 << 3); // UE, TE
}

void usart2_send_char(char c) {
    while (!(USART2_ISR & (1 << 7)));
    USART2_TDR = c;
}

void usart2_send_string(char *s) {
    while (*s) {
        usart2_send_char(*s++);
    }
}

// ADC Init
void adc_init(void) {
    RCC_APB2ENR |= (1 << 9); // ADC clock
    ADC_CR |= (1 << 0); // Enable ADC
    while (!(ADC_ISR & (1 << 0)));
}

// Read LM35 from PA0
uint16_t adc_read_lm35(void) {
    ADC_CHSELR = (1 << 0); // Channel 0 (PA0)
    ADC_CR |= (1 << 2); // Start conversion
    while (!(ADC_ISR & (1 << 2)));
    return (uint16_t)ADC_DR;
}

// Task 1: LED Blink every 1 sec
void led_task(void *param) {
    (void)param;
    while (1) {
        GPIOC_ODR ^= (1 << 6); // Toggle PC6
        vTaskDelay(pdMS_TO_TICKS(1000)); // 1 sec
    }
}

// Task 2: Read LM35 every 2 sec
void lm35_task(void *param) {
    (void)param;
    while (1) {
        uint16_t adc_val = adc_read_lm35();
        float voltage = (adc_val / 4095.0f) * 3.3f;
        float temperature = voltage * 100; // Â°C
        uint32_t temp_int = (uint32_t)temperature;
        xQueueSend(tempQueue, &temp_int, portMAX_DELAY);
        vTaskDelay(pdMS_TO_TICKS(2000)); // 2 sec
    }
}

// Task 3: Send temp via UART every 3 sec
void uart_task(void *param) {
    (void)param;
    char buffer[32];
    while (1) {
        uint32_t temp_val;
        if (xQueueReceive(tempQueue, &temp_val, 0) == pdPASS) {
            int len = 0;
            len += sprintf(&buffer[len], "Temp: %lu C\r\n", temp_val);
            buffer[len] = 0;
            usart2_send_string(buffer);
        } else {
            usart2_send_string("No data\r\n");
        }
        vTaskDelay(pdMS_TO_TICKS(3000)); // 3 sec
    }
}

int main(void) {
    // GPIOC Init for LED on PC6
    RCC_IOPENR |= (1 << 2);
    GPIOC_MODER &= ~(0x3 << (6*2));
    GPIOC_MODER |=  (0x1 << (6*2)); // PC6 output

    // GPIOA Init for PA0 (analog) for LM35
    RCC_IOPENR |= (1 << 0);
    GPIOA_MODER |= (0x3 << (0*2)); // PA0 analog

    adc_init();
    usart2_init();

    tempQueue = xQueueCreate(5, sizeof(uint32_t));

    xTaskCreate(led_task, "LED", 128, NULL, 1, NULL);
    xTaskCreate(lm35_task, "LM35", 128, NULL, 2, NULL);
    xTaskCreate(uart_task, "UART", 128, NULL, 1, NULL);

    vTaskStartScheduler();

    while (1);
}
