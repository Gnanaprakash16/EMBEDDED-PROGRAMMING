#include <stdint.h>

// Peripheral base addresses
#define GPIOC_BASE       (0x50000800UL)
#define RCC_BASE         (0x40021000UL)

// Register offsets and addresses
#define RCC_IOPENR_OFFSET (0x34UL)
#define RCC_IOPENR (*(volatile uint32_t*)(RCC_BASE + RCC_IOPENR_OFFSET))

#define GPIOC_MODER_OFFSET (0x00UL)
#define GPIOC_MODER (*(volatile uint32_t*)(GPIOC_BASE + GPIOC_MODER_OFFSET))

#define GPIOC_ODR_OFFSET (0x14UL)
#define GPIOC_ODR (*(volatile uint32_t*)(GPIOC_BASE + GPIOC_ODR_OFFSET))

// Delay function
void delay(volatile uint32_t time) {
    while (time--) {
        for (volatile uint32_t i = 0; i < 1000; i++);
    }
}

int main(void) {
    // Enable GPIOC clock
    RCC_IOPENR |= (1 << 2);

    // Set PC4, PC5, PC6, PC7 as output
    GPIOC_MODER &= ~(0xFFFF << 8); // Clear PC4-PC7 bits
    GPIOC_MODER |=  (0x5555 << 8); // Set as output (01 per pin)

    while (1) {
        // Move LED left to right
        for (uint8_t i = 0; i < 4; i++) {
            GPIOC_ODR &= ~(0xF << 4);         // Clear PC4-PC7
            GPIOC_ODR |= (1 << (4 + i));      // Turn ON one LED
            delay(500);
        }

        // Move LED right to left
        for (int8_t i = 2; i >= 0; i--) {     // i=2 avoids immediate repeat of last LED
            GPIOC_ODR &= ~(0xF << 4);         // Clear PC4-PC7
            GPIOC_ODR |= (1 << (4 + i));      // Turn ON one LED
            delay(500);
        }
    }
}
