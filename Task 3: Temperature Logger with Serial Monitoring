#include <stdint.h>

// RCC, GPIO, USART, ADC addresses
#define RCC_BASE               0x40021000UL
#define RCC_IOPENR             (*(volatile uint32_t*)(RCC_BASE + 0x34))
#define RCC_APB2ENR            (*(volatile uint32_t*)(RCC_BASE + 0x18))

#define GPIOA_BASE             0x50000000UL
#define GPIOA_MODER            (*(volatile uint32_t*)(GPIOA_BASE + 0x00))
#define GPIOA_AFRL             (*(volatile uint32_t*)(GPIOA_BASE + 0x20))

#define USART2_BASE            0x40004400UL
#define USART2_CR1             (*(volatile uint32_t*)(USART2_BASE + 0x00))
#define USART2_BRR             (*(volatile uint32_t*)(USART2_BASE + 0x0C))
#define USART2_ISR             (*(volatile uint32_t*)(USART2_BASE + 0x1C))
#define USART2_TDR             (*(volatile uint32_t*)(USART2_BASE + 0x28))

#define ADC1_BASE              0x40012400UL
#define ADC_CR                 (*(volatile uint32_t*)(ADC1_BASE + 0x08))
#define ADC_CFGR1              (*(volatile uint32_t*)(ADC1_BASE + 0x0C))
#define ADC_CHSELR             (*(volatile uint32_t*)(ADC1_BASE + 0x28))
#define ADC_ISR                (*(volatile uint32_t*)(ADC1_BASE + 0x00))
#define ADC_DR                 (*(volatile uint32_t*)(ADC1_BASE + 0x40))
#define ADC_CCR                (*(volatile uint32_t*)(ADC1_BASE + 0x308))

// Factory calibration addresses for temperature sensor
#define TS_CAL1 *((uint16_t*)0x1FFF75A8) // at 30°C
#define TS_CAL2 *((uint16_t*)0x1FFF75CA) // at 110°C

void delay(volatile uint32_t d) {
    while(d--) {
        for(volatile uint32_t i = 0; i < 1000; i++);
    }
}

// USART2 Initialization: 115200 baud, TX only on PA2
void usart2_init(void) {
    RCC_IOPENR |= (1 << 0); // Enable GPIOA clock

    // Set PA2 (TX) to AF mode
    GPIOA_MODER &= ~(0x3 << (2*2)); // Clear bits
    GPIOA_MODER |=  (0x2 << (2*2)); // Set to AF mode
    GPIOA_AFRL  |=  (0x1 << (4*2)); // AF1 for USART2 TX

    RCC_APB2ENR |= (1 << 17); // Enable USART2 clock

    USART2_BRR = 64000000 / 115200; // PCLK = 64 MHz, Baud = 115200
    USART2_CR1 = (1 << 0) | (1 << 3); // UE = 1, TE = 1
}

// USART2 send single char
void usart2_send_char(char c) {
    while (!(USART2_ISR & (1 << 7))); // Wait TXE
    USART2_TDR = c;
}

// USART2 send string
void usart2_send_string(char *s) {
    while (*s) {
        usart2_send_char(*s++);
    }
}

// Simple uint32_t to ASCII conversion
void usart2_send_uint(uint32_t num) {
    char buf[10];
    int i = 0;
    if (num == 0) {
        usart2_send_char('0');
        return;
    }
    while (num > 0) {
        buf[i++] = (num % 10) + '0';
        num /= 10;
    }
    while (i--) {
        usart2_send_char(buf[i]);
    }
}

// ADC Initialization for Temperature Sensor
void adc_init(void) {
    RCC_APB2ENR |= (1 << 9); // Enable ADC clock

    ADC_CCR |= (1 << 23);    // Enable temperature sensor (TSEN)

    ADC_CR |= (1 << 0);      // Enable ADC (ADEN)
    while (!(ADC_ISR & (1 << 0))); // Wait until ready
}

// Read ADC value from temperature sensor channel
uint16_t adc_read_temp_sensor(void) {
    ADC_CHSELR = (1 << 16); // Select temperature sensor channel
    ADC_CR |= (1 << 2);     // Start conversion (ADSTART)
    while (!(ADC_ISR & (1 << 2))); // Wait end of conversion (EOC)
    return (uint16_t)ADC_DR;
}

// Calculate temperature using calibration data
uint32_t calculate_temperature(uint16_t adc_value) {
    uint32_t temp = ((int32_t)(adc_value - TS_CAL1) * (110 - 30));
    temp = temp / (TS_CAL2 - TS_CAL1);
    temp = temp + 30;
    return temp;
}

int main(void) {
    usart2_init();
    adc_init();

    usart2_send_string("Internal Temperature Sensor Reading:\r\n");

    while (1) {
        uint16_t adc_val = adc_read_temp_sensor();
        uint32_t temp_c = calculate_temperature(adc_val);

        usart2_send_string("Temp: ");
        usart2_send_uint(temp_c);
        usart2_send_string(" C\r\n");

        delay(1000); // ~1s delay between samples
    }
}
