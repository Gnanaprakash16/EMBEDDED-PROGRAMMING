#include "stm32g070xx.h"
#include <stdint.h>

// SSD1306 OLED I2C address
#define SSD1306_ADDRESS 0x3C

// ===== Font (A-Z only, 11x18 condensed) =====
const uint8_t font11x18[26][11] = {
    {0x00,0x78,0x7C,0x1E,0x1B,0x19,0x1B,0x1E,0x7C,0x78,0x00}, // A
    {0x7F,0x7F,0x49,0x49,0x49,0x49,0x7F,0x36,0x00,0x00,0x00}, // B
    {0x1E,0x3F,0x61,0x41,0x41,0x41,0x63,0x22,0x00,0x00,0x00}, // C
    {0x7F,0x7F,0x41,0x41,0x41,0x61,0x3F,0x1E,0x00,0x00,0x00}, // D
    {0x7F,0x7F,0x49,0x49,0x49,0x49,0x41,0x41,0x00,0x00,0x00}, // E
    {0x7F,0x7F,0x09,0x09,0x09,0x09,0x01,0x01,0x00,0x00,0x00}, // F
    {0x1E,0x3F,0x61,0x41,0x49,0x49,0x7B,0x3A,0x00,0x00,0x00}, // G
    {0x7F,0x7F,0x08,0x08,0x08,0x08,0x7F,0x7F,0x00,0x00,0x00}, // H
    {0x00,0x41,0x41,0x7F,0x7F,0x41,0x41,0x00,0x00,0x00,0x00}, // I
    {0x30,0x70,0x40,0x40,0x41,0x7F,0x3F,0x01,0x00,0x00,0x00}, // J
    {0x7F,0x7F,0x08,0x0C,0x16,0x33,0x61,0x41,0x00,0x00,0x00}, // K
    {0x7F,0x7F,0x40,0x40,0x40,0x40,0x40,0x40,0x00,0x00,0x00}, // L
    {0x7F,0x7F,0x06,0x0C,0x18,0x0C,0x06,0x7F,0x7F,0x00,0x00}, // M
    {0x7F,0x7F,0x06,0x0C,0x18,0x30,0x7F,0x7F,0x00,0x00,0x00}, // N
    {0x1E,0x3F,0x61,0x41,0x41,0x41,0x61,0x3F,0x1E,0x00,0x00}, // O
    {0x7F,0x7F,0x09,0x09,0x09,0x09,0x0F,0x06,0x00,0x00,0x00}, // P
    {0x1E,0x3F,0x61,0x41,0x51,0x31,0x61,0x7F,0x5E,0x00,0x00}, // Q
    {0x7F,0x7F,0x09,0x09,0x19,0x39,0x6F,0x46,0x00,0x00,0x00}, // R
    {0x26,0x6F,0x49,0x49,0x49,0x49,0x79,0x32,0x00,0x00,0x00}, // S
    {0x01,0x01,0x7F,0x7F,0x01,0x01,0x00,0x00,0x00,0x00,0x00}, // T
    {0x3F,0x7F,0x40,0x40,0x40,0x40,0x7F,0x3F,0x00,0x00,0x00}, // U
    {0x0F,0x1F,0x30,0x60,0x60,0x30,0x1F,0x0F,0x00,0x00,0x00}, // V
    {0x7F,0x7F,0x30,0x18,0x0C,0x18,0x30,0x7F,0x7F,0x00,0x00}, // W
    {0x61,0x73,0x1E,0x0C,0x0C,0x1E,0x73,0x61,0x00,0x00,0x00}, // X
    {0x07,0x0F,0x18,0x70,0x70,0x18,0x0F,0x07,0x00,0x00,0x00}, // Y
    {0x61,0x71,0x59,0x4D,0x47,0x43,0x41,0x00,0x00,0x00,0x00}  // Z
};

// ===== Helper Functions =====
void delay(volatile uint32_t d) {
    while (d--) {
        for (volatile uint32_t i = 0; i < 1000; i++);
    }
}

void itoa(int n, char s[]) {
    int i = 0;
    do {
        s[i++] = n % 10 + '0';
    } while ((n /= 10) > 0);
    s[i] = '\0';

    for (int j = 0; j < i/2; j++) {
        char tmp = s[j];
        s[j] = s[i - j - 1];
        s[i - j - 1] = tmp;
    }
}

// ===== I2C & SSD1306 Functions =====
void I2C1_Init(void) {
    RCC->APBENR1 |= RCC_APBENR1_I2C1EN;
    RCC->IOPENR |= RCC_IOPENR_GPIOBEN;

    GPIOB->MODER &= ~(GPIO_MODER_MODE6_Msk | GPIO_MODER_MODE7_Msk);
    GPIOB->MODER |= (2 << GPIO_MODER_MODE6_Pos) | (2 << GPIO_MODER_MODE7_Pos);
    GPIOB->OTYPER |= GPIO_OTYPER_OT6 | GPIO_OTYPER_OT7;
    GPIOB->AFR[0] |= (6 << GPIO_AFRL_AFSEL6_Pos) | (6 << GPIO_AFRL_AFSEL7_Pos);

    I2C1->TIMINGR = 0x00303D5B;
    I2C1->CR1 |= I2C_CR1_PE;
}

void I2C1_Write(uint8_t address, uint8_t *data, uint8_t length) {
    while (I2C1->ISR & I2C_ISR_BUSY);
    I2C1->CR2 = (address << 1) | (length << 16) | I2C_CR2_START;

    for (uint8_t i = 0; i < length; i++) {
        while (!(I2C1->ISR & I2C_ISR_TXIS));
        I2C1->TXDR = data[i];
    }
    while (!(I2C1->ISR & I2C_ISR_TC));
    I2C1->CR2 |= I2C_CR2_STOP;
}

void SSD1306_Command(uint8_t command) {
    uint8_t data[2] = {0x00, command};
    I2C1_Write(SSD1306_ADDRESS, data, 2);
}

void SSD1306_Init(void) {
    uint8_t init_cmds[] = {
        0xAE, 0x20, 0x00, 0xB0, 0xC8, 0x00, 0x10, 0x40, 0x81, 0x7F,
        0xA1, 0xA6, 0xA8, 0x3F, 0xD3, 0x00, 0xD5, 0x80, 0xD9, 0xF1,
        0xDA, 0x12, 0xDB, 0x40, 0x8D, 0x14, 0xAF
    };
    for (uint8_t i = 0; i < sizeof(init_cmds); i++) {
        SSD1306_Command(init_cmds[i]);
    }
}

void SSD1306_Clear(void) {
    uint8_t buffer[129] = {0x40};
    for (int i = 1; i < 129; i++) buffer[i] = 0x00;
    for (int page = 0; page < 8; page++) {
        SSD1306_Command(0xB0 + page);
        SSD1306_Command(0x00);
        SSD1306_Command(0x10);
        I2C1_Write(SSD1306_ADDRESS, buffer, 129);
    }
}

void SSD1306_PrintChar(char c) {
    if (c >= 'A' && c <= 'Z') {
        uint8_t buffer[12] = {0x40};
        for (int i = 0; i < 11; i++) {
            buffer[i + 1] = font11x18[c - 'A'][i];
        }
        I2C1_Write(SSD1306_ADDRESS, buffer, 12);
    }
}

void SSD1306_PrintString(const char *str) {
    while (*str) {
        SSD1306_PrintChar(*str++);
    }
}

void SSD1306_DrawBar(uint8_t length) {
    uint8_t buffer[129] = {0x40};
    for (int i = 1; i <= length && i < 129; i++) buffer[i] = 0xFF;
    for (int page = 4; page <= 5; page++) {
        SSD1306_Command(0xB0 + page);
        SSD1306_Command(0x00);
        SSD1306_Command(0x10);
        I2C1_Write(SSD1306_ADDRESS, buffer, 129);
    }
}

// ===== ADC Functions =====
void ADC_Init(void) {
    RCC->APBENR2 |= RCC_APBENR2_ADCEN;
    ADC1->CR |= ADC_CR_ADEN;
    while (!(ADC1->ISR & ADC_ISR_ADRDY));
}

uint16_t ADC_Read(void) {
    ADC1->CHSELR = (1 << 0); // PA0
    ADC1->CR |= ADC_CR_ADSTART;
    while (!(ADC1->ISR & ADC_ISR_EOC));
    return ADC1->DR;
}

// ===== Main =====
int main(void) {
    I2C1_Init();
    SSD1306_Init();
    SSD1306_Clear();
    ADC_Init();

    char tempStr[10];

    while (1) {
        uint16_t adc_val = ADC_Read();
        float voltage = (adc_val / 4095.0f) * 3.3f;
        float temperature = voltage * 100.0f;

        SSD1306_Clear();
        SSD1306_Command(0xB0); // Page 0
        SSD1306_Command(0x00);
        SSD1306_Command(0x10);

        SSD1306_PrintString("TEMP");

        int temp_int = (int)temperature;
        itoa(temp_int, tempStr);
        SSD1306_PrintString(tempStr);

        SSD1306_PrintString("C");

        uint8_t bar_length = (uint8_t)((temperature / 50.0f) * 128); // scale to display
        if (bar_length > 128) bar_length = 128;
        SSD1306_DrawBar(bar_length);

        delay(2000);
    }
}
